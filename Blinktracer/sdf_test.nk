#! /transfer/apps/Nuke/Nuke10.0Dev.000004b/libnuke-10.0.so -nx
version 10.0 v0.000004b
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="0" y="25" w="1920" h="1030" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="899"/>
            <splitter orientation="2">
                <split size="323"/>
                <dock id="" activePageId="Error Console.1">
                    <page id="uk.co.thefoundry.scripteditor.2"/>
                    <page id="Error Console.1"/>
                </dock>
                <split size="653"/>
                <dock id="" activePageId="Properties.1">
                    <page id="Properties.1"/>
                </dock>
            </splitter>
            <split size="1017"/>
            <splitter orientation="2">
                <split size="820"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
                <split size="156"/>
                <dock id="" hideTitles="1" activePageId="DAG.1">
                    <page id="DAG.1"/>
                </dock>
            </splitter>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /mnt/nethome/users/tom.minor/dev/blinktracer/sdf_test.nk
 frame 249
 last_frame 628
 fps 25
 format "1280 720 0 0 1280 720 1 HD_720"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement Nuke
}
Read {
 inputs 0
 file /tmp/mandelbulb_####.png
 format "2048 1080 0 0 2048 1080 1 2K_DCP"
 proxy_format "2048 1080 0 0 2048 1080 1 2K_DCP"
 last 400
 origlast 400
 origset true
 name Read1
 xpos -418
 ypos -91
}
Reformat {
 format "2048 1080 0 0 2048 1080 1 2K_DCP"
 name Reformat1
 xpos -418
 ypos 13
}
Write {
 file /tmp/mandelbulb_aa_%04d.png
 file_type png
 checkHashOnRead false
 version 1
 in_colorspace linear
 out_colorspace linear
 name Write2
 xpos -418
 ypos 70
 addUserKnob {20 caravr l CaraVR}
 addUserKnob {4 viewPresets l "View Presets" M {main stereo cams all}}
 addUserKnob {22 set l Set -STARTLINE T "w = nuke.thisNode()\nscriptViews = nuke.views()\nviewPreset = w\['viewPresets'].getValue()\nselectedViews = None\nif viewPreset == 0:\n  selectedViews = \['main']\nif viewPreset == 1:\n  stereoViews = \['left', 'right']\n  if set(stereoViews).issubset(set(scriptViews)):\n    selectedViews = stereoViews\n  else:\n    selectedViews = None\nelif viewPreset == 2:\n  selectedViews = \[v for v in scriptViews if 'cam' in v.lower()]\nelif viewPreset == 3:\n  selectedViews = scriptViews\nif selectedViews:\n  w\['views'].fromScript(' '.join(selectedViews))\n"}
}
Write {
 inputs 0
 file /tmp/mandelbulb_%04d.png
 file_type png
 checkHashOnRead false
 version 3
 in_colorspace linear
 out_colorspace linear
 name Write1
 xpos -245
 ypos -55
 addUserKnob {20 caravr l CaraVR}
 addUserKnob {4 viewPresets l "View Presets" M {main stereo cams all}}
 addUserKnob {22 set l Set -STARTLINE T "w = nuke.thisNode()\nscriptViews = nuke.views()\nviewPreset = w\['viewPresets'].getValue()\nselectedViews = None\nif viewPreset == 0:\n  selectedViews = \['main']\nif viewPreset == 1:\n  stereoViews = \['left', 'right']\n  if set(stereoViews).issubset(set(scriptViews)):\n    selectedViews = stereoViews\n  else:\n    selectedViews = None\nelif viewPreset == 2:\n  selectedViews = \[v for v in scriptViews if 'cam' in v.lower()]\nelif viewPreset == 3:\n  selectedViews = scriptViews\nif selectedViews:\n  w\['views'].fromScript(' '.join(selectedViews))\n"}
}
BlinkScript {
 inputs 0
 kernelSourceFile /mnt/netdev/tom.minor/dev/blinktracer/sdf_renderer.rpp
 recompileCount 538
 ProgramGroup 1
 KernelDescription "2 \"TestKernel\" iterate pixelWise 8f1fd421cc9efd705d13888adfaf812411bc8e69e9210b596847e59cb7962cb0 1 \"dst\" Write Point 27 \"Image Resolution\" Int 2 AAUAANACAAA= \"Max Iterations\" Int 1 ZAAAAA== \"Camera Position\" Float 3 AAAAAAAAgD8AAABAAAAAAA== \"Camera Angles\" Float 3 AADQwQAAAAAAADRDAAAAAA== \"Field Of View\" Float 1 AABIQg== \"AntiAliasing Samples\" Int 1 BAAAAA== \"Enable Occlusion\" Bool 1 AQ== \"Occlusion Max Distance\" Float 1 AADgPw== \"Occlusion Falloff\" Float 1 CtejPQ== \"Occlusion Samples\" Int 1 BgAAAA== \"Shadow Min Distance\" Float 1 zczMPQ== \"Shadow Max Distance\" Float 1 AAAAQA== \"Shadow Falloff\" Float 1 AADgQA== \"Enable Shadows\" Bool 1 AQ== \"Fog B\" Float 1 CtcjOw== \"Fog Exponent\" Int 1 AwAAAA== \"Enable Fog\" Bool 1 AA== \"Mandelbulb Power\" Float 1 AAAAQQ== \"Mandelbulb Iterations\" Int 1 IAAAAA== \"Orbit Trap Colour A\" Float 3 PQpXvrgeBb7hepQ+AAAAAA== \"Orbit Trap Colour B\" Float 3 AACAP9ejkD8AAIA/AAAAAA== \"Orbit Trap Intensity\" Float 1 MzOzPw== \"Scene Epsilon\" Float 1 bxKDOg== \"Normal Epsilon\" Float 1 bxKDOg== \"Light Positions\" Float 6 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= \"Light Colours\" Float 6 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= \"Light Intensities\" Float 2 AAAAAAAAAAA= 27 \"resolution\" 2 1 \"iterations\" 1 1 \"camPos\" 3 1 \"camDir\" 3 1 \"fov\" 1 1 \"aa_samples\" 1 1 \"occlusion_enabled\" 1 1 \"occlusion_maxdist\" 1 1 \"occlusion_falloff\" 1 1 \"occlusion_samples\" 1 1 \"shadowmint\" 1 1 \"shadowwmaxt\" 1 1 \"shadowfalloff\" 1 1 \"shadow_enabled\" 1 1 \"fog_b\" 1 1 \"fog_exponent_scale\" 1 1 \"enable_fog\" 1 1 \"mandelbulb_power\" 1 1 \"mandelbulb_search_iterations\" 1 1 \"trap_colour_a\" 3 1 \"trap_colour_b\" 3 1 \"orbit_trap_intensity\" 1 1 \"epsilon\" 1 1 \"normal_epsilon\" 1 1 \"lightPositions\" 3 2 \"lightColours\" 3 2 \"lightIntensities\" 1 2 0"
 kernelSource "#include \"glsl_functions.h\"\n#include \"sdf_functions.h\"\n#include \"sdf_primitives.h\"\n\n///**** TODO ****\n// * Hemispherical occlusion is wrong\n// * Apply AO only to ambient, don't scale everything by it\n// * Clean up this code, very rough atm\n//\t\t+ The trap value 'bubbles' up through a bunch of functions, crap design\n// * Make the scene the foundry logo?\n\nkernel TestKernel : ImageComputationKernel<ePixelWise>\n\{\n\t// No input data needed\n\tImage<eWrite, eAccessPoint, eEdgeNone> dst;\n\n\tlocal:\n\tstatic const float MAX_DIST = 9999999.9f;\n\tstatic const int MAX_LIGHTS = 2;\n\n\tparam:\n\tint2 resolution;\n\tint iterations;\n\t\n\tfloat3 camPos;\n\tfloat3 camDir;\n\tfloat fov;\n\n\tint aa_samples;\n\n\tbool occlusion_enabled;\n\tfloat occlusion_maxdist;\n\tfloat occlusion_falloff;\n\tint occlusion_samples;\n\n\tfloat shadowmint;\n\tfloat shadowwmaxt;\n\tfloat shadowfalloff;\n\tbool shadow_enabled;\n\n\tfloat fog_b;\n\tint  fog_exponent_scale;\n\tbool enable_fog;\n\n\tfloat mandelbulb_power;\n\tint mandelbulb_search_iterations;\n\t\n\tfloat3 trap_colour_a;\n\tfloat3 trap_colour_b;\n\tfloat orbit_trap_intensity;\n\n\tfloat epsilon;\n\tfloat normal_epsilon;\n\n\tfloat3 lightPositions\[MAX_LIGHTS];\n\tfloat3 lightColours\[MAX_LIGHTS];\n\tfloat  lightIntensities\[MAX_LIGHTS];\n\n\tvoid define()\n\t\{\n\t\t// @todo Ideally this should be linked up to format\n\t\tdefineParam(resolution, \"Image Resolution\", int2(1280, 720) );\n\n\t\t// ----------- Accuracy ---------------\t\t\n\t\tdefineParam(iterations, \"Max Iterations\", 100);\n\t\t\n\n\t\t// ---------- Features -----------\n\t\tdefineParam(occlusion_enabled, \"Enable Occlusion\", true);\n\t\tdefineParam(shadow_enabled, \"Enable Shadows\", true);\n\t\tdefineParam(enable_fog, \"Enable Fog\", false);\n\n\t\t// ----------- Camera ---------------\t\t\n\t\tdefineParam(camPos, \"Camera Position\", \tfloat3(0.0f, 1.0f, 2.0f) );\n\t\tdefineParam(camDir, \"Camera Angles\", float3(-26.0f, 0.0f, 180.0f) );\n\t\tdefineParam(fov, \"Field Of View\", 50.0f);\n\n\t\t// ----------- Sampling ---------------\n\t\tdefineParam(aa_samples, \"AntiAliasing Samples\", 4);\n\t\t\n\t\t// ---------- Occlusion -------------\t\t\n\t\tdefineParam(occlusion_samples, \"Occlusion Samples\", 6);\n\t\tdefineParam(occlusion_maxdist, \"Occlusion Max Distance\", 1.75f);\n\t\tdefineParam(occlusion_falloff, \"Occlusion Falloff\", 0.08f);\n\n\t\t// ---------- Shadows -------------\n\t\tdefineParam(shadowmint, \"Shadow Min Distance\", \t0.1f);\n\t\tdefineParam(shadowwmaxt, \"Shadow Max Distance\", 2.0f);\n\t\tdefineParam(shadowfalloff, \"Shadow Falloff\", \t7.0f);\n\n\t\t// ----------- Fog ---------------\n\t\tdefineParam(fog_b, \"Fog B\", 0.0025f);\n\t\tdefineParam(fog_exponent_scale, \"Fog Exponent\", 3);\n\n\n\t\t// ---------- Mandelbulb --------------\n\t\tdefineParam(mandelbulb_power, \"Mandelbulb Power\", 8.0f);\t//3.0 + fabs((sin(frame * \[knob \"animspeed\"])) * 5.0)\n\t\tdefineParam(mandelbulb_search_iterations, \"Mandelbulb Iterations\", 32);\n\t\tdefineParam(trap_colour_a, \"Orbit Trap Colour A\", float3(-0.21f, \t-0.13f, \t0.29f) );\n\t\tdefineParam(trap_colour_b, \"Orbit Trap Colour B\", float3(1.0f,\t\t1.13f,\t\t1.0f) );\n\t\tdefineParam(orbit_trap_intensity, \"Orbit Trap Intensity\", 1.4f);\n\n\t\t// ----------- Accuracy ---------------\n\t\tdefineParam(epsilon, \"Scene Epsilon\", 0.001f);\n\t\tdefineParam(normal_epsilon, \"Normal Epsilon\", 0.001f);\n\n\t\tdefineParam(lightPositions, \"Light Positions\");\n\t\tdefineParam(lightColours, \"Light Colours\");\n\t\tdefineParam(lightIntensities, \"Light Intensities\");\n\t\}\n\t\n\tvoid init()\n\t\{\n\t\t// resolution = float2( dst.bounds.y1, dst.bounds.y2 );\n\n\t\t// lightPositions\[0] = float3( -0.5f, 3.0f, 4.0f );\n\t\t// lightColours\[0]\t  = float3( 0.9f, 0.9f, 0.98f );\n\t\t// lightIntensities\[0]\t= 30.0f;\n\n\t\t// lightPositions\[1] = float3( 0.0, -0.4, 0.92 );\n\t\t// lightColours\[1]\t  = float3( 0.0f, 1.0f, 0.5f );\n\t\t// lightIntensities\[0]\t= 5.0f;\n\t\}\n\n\t// http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n\tfloat rand(float2 _co)\n\t\{\n \t   return fract(sin(dot(_co , float2(12.9898f, 78.233f))) * 43758.5453f);\n\t\}\n\n\tfloat sdMandelbulb(float3 _p, float _power, float _iterations, float& _trap)\n\t// float sdMandelbulb(float3 _p, float _power, float _iterations)\n\t\{\n\t\tconst float sq_threshold = 2.0f; // Divergence threshold\n\t\tconst float s = 0.9f;\n\n\t\tfloat3 zn = _p;\n\t\tfloat rad = 0.0f;\n\t\tfloat dist = 0.0f;\n\t\tfloat d = 1.0f;\n        float k = 1.0f;\n\n        _trap = 1e10;\n\t\tfor(int i = 0; i < _iterations; i++)\n\t\t\{\n\t\t\trad = length(zn);\n\n\t\t\t_trap = min(_trap, dot(zn,zn) / (k*k) );\n\n\t\t\tif(rad > sq_threshold)\n\t\t\t\{\n\t\t\t\tdist = 0.5f * rad * log(rad)/float(d);\n\t\t\t\}\n\t\t\telse\n\t\t\t\{\n\t\t\t\tfloat th = atan2( length( float3(zn.x, zn.y, 0.0f) ), zn.z);\n\t\t\t\tfloat phi = atan2( zn.y, zn.x );\n\t\t\t\tfloat rado = pow(rad, _power);\n\t\t\t\td = pow(rad, _power - 1.0f) * (_power - 1.0f) * d + 1.0f;\n\n\t\t\t\tfloat sint = sin(th * _power);\n\t\t\t\tzn.x = rado * sint * cos(phi * _power);\n\t\t\t\tzn.y = rado * sint * sin(phi * _power);\n\t\t\t\tzn.z = rado * cos(th * _power);\n\t\t\t\tzn += _p;\n\t\t\t\}\n\n\t\t\tk *= s;\n\t\t\}\n\n\t\treturn dist;\n\t\}\n\n\tfloat map(float3 _p, float& _trap)\n\t\{\n\t\tfloat3 p = _p;\n\t\tfloat d1 = sdPlane(p, float4(0.0f, 1.0f, 0.0f, 0.0f) );\n\t\t\n\t\tp = p - float3(0.0f, 1.1f, 0.0f);\n\t\tfloat d2 = sdMandelbulb(p, mandelbulb_power, mandelbulb_search_iterations, _trap);\n\t\t\n\t\treturn min(d2, d1);\n\t\}\n\n\t// http://www.aduprat.com/portfolio/?page=articles/hemisphericalSDFAO\n\tfloat3 randomSphereDir(float2 _rnd)\n\t\{\n\t\tfloat s = _rnd.x * PI * 2.0f;\n\t\tfloat t = _rnd.y * 2.0 - 1.0f;\n\t\treturn float3( sin(s), cos(s), t) / sqrt(1.0f + t * t);\n\t\}\n\n\tfloat3 randomHemisphereDir(float3 _dir, float _i)\n\t\{\n\t\tfloat3 v = randomSphereDir( float2(rand(_i+1.0f), rand(_i + 2.0f)) );\n\t\treturn v * sign(dot(v, _dir));\n\t\}\n\n\tfloat hemisphericalOcclusion(float3 _p, float3 _n, float _maxDist, float _falloff)\n\t\{\n\t\tfloat ao = 0.0f;\n\t\tconst float inverseOcclusionSamples = 1.0f / float(occlusion_samples);\n\t\tconst float rad = 1.0f * -1.0f * inverseOcclusionSamples;\n\n\t\tfor(int i = 0; i < occlusion_samples; i++)\n\t\t\{\n\t\t\tfloat l = rand(float(i)) * _maxDist; // Randomly sized sample\n\t\t\tfloat3 rayDir = normalize(_n + randomHemisphereDir(_n,l) * rad) * l;\n\n\t\t\tfloat tmptrap = 0.0f;\n\t\t\tao += (l - map(_p + rayDir, tmptrap)) / pow(1.0f + l, _falloff);\n\t\t\}\n\n\t\treturn clamp( 1.0f - ao / float(occlusion_samples), 0.0f, 1.0f);\n\t\}\n\n\t// http://www.iquilezles.org/www/articles/rmshadows/rmshadows.htm\n\tfloat softshadow(float3 _ro, float3 _rd, float _mint, float _maxt, float _k)\n\t\{\n\t\tfloat result = 1.0f;\n\t\tfor(float t = _mint; t < _maxt; )\n\t\t\{\n\t\t\tfloat tmptrap = 0.0f;\n\t\t\tfloat h = map(_ro + _rd*t, tmptrap);\n\t\t\tif(h < 0.001\n)\t\t\t\{\n\t\t\t\treturn 0.0f;\n\t\t\t\}\n\n\t\t\tresult = min(result, _k*h/t);\n\t\t\tt += h;\n\t\t\}\n\n\t\treturn result;\n\t\}\n\n\tfloat3 shade(float3 _p, float3 _n, float _trap)\n\t\{\n\t\tfloat3 radiance = float3(0.0f);\n\n\t\tfor(int i = 0; i < MAX_LIGHTS; i++)\n\t\t\{\n\t\t\tfloat3 light_path = _p - lightPositions\[i];\n\t\t\tfloat3 light_dir = normalize(light_path);\n\t\t\tfloat attenuation = 1.0f / pow(length(light_path), 2);\n\t\t\tfloat halflambert = (max(dot(normalize(_n), light_dir), 0.0f) + 0.5f) * 0.5f; // Soften up the diffuse lighting a little (https://developer.valvesoftware.com/wiki/Half_Lambert)\n\n\t\t\tfloat shadowed = shadow_enabled ? softshadow(_p, -light_dir, shadowmint, shadowwmaxt, shadowfalloff) : 1.0f;\n\t\t\tshadowed = clamp(shadowed, 0.025f, 1.0f); // Prevent a very dark shadow, you could just add an ambient term to the lighting calculations instead\n\n\t\t\tfloat3 diffuse_colour = mix( float3(1.0f), mix( trap_colour_a, trap_colour_b, _trap), orbit_trap_intensity);\n\t\t\tradiance +=  diffuse_colour * (halflambert * lightColours\[i] * lightIntensities\[i] * attenuation) * shadowed;\n\t\t\}\n\n\t\tfloat3 ambient(0.025f, 0.025f, 0.05f);\n\t\t// return radiance + (ambient * (occlusion_enabled ? hemisphericalOcclusion(_p, _n, occlusion_maxdist, occlusion_falloff) : 1.0f) );\n\t\treturn (ambient * (occlusion_enabled ? hemisphericalOcclusion(_p, _n, occlusion_maxdist, occlusion_falloff) : 1.0f) );\n\t\}\n\n\t// Finite difference estimation\n\tfloat3 estimate_normal(float3 _p)\n\t\{\n\t\tfloat3 dx = float3(normal_epsilon, 0.0f, 0.0f);\n\t\tfloat3 dy = float3(0.0f, normal_epsilon, 0.0f);\n\t\tfloat3 dz = float3(0.0f, 0.0f, normal_epsilon);\n\n\t\tfloat tmptrap = 0.0f;\n\t\treturn normalize(float3(\n\t\t\t\tmap(_p + dx, tmptrap) - map(_p - dx, tmptrap),\n\t\t\t\tmap(_p + dy, tmptrap) - map(_p - dy, tmptrap),\n\t\t\t\tmap(_p + dz, tmptrap) - map(_p - dz, tmptrap)\n\t\t\t));\n\t\}\n\n\tfloat3 cameraRay(float2 _fragcoord, float3 _camPos, float3 _camDir, float _fov)\n\t\{\n\t\tint x = _fragcoord.x;\n\t\tint y = _fragcoord.y;\n\n\t\tfloat imageAspectRatio = resolution.x / (float)resolution.y; \n\t\tfloat Px = (2.0f * ((x + 0.5f) / resolution.x) - 1.0f) * tan(_fov / 2.0f * PI / 180.0f) * imageAspectRatio;\n\t\tfloat Py = (1.0f - 2.0f * ((y + 0.5f) / resolution.y) * tan(_fov / 2.0f * PI / 180.0f)); \n\n\t\tfloat4x4 camToWorld = float4x4_identity;\n\t\t\n\t\t// Todo, do this in init() instead\n\t\tfloat4x4 rotX, rotY, rotZ, translation;\n\t\ttranslation.setTranslate( float4(_camPos.x, _camPos.y, _camPos.z, 1.0f) );\n\t\trotX.setRotateX( radians(_camDir.x) );\t // Should these be in radians or degrees?\n\t\trotY.setRotateY( radians(_camDir.y) );\n\t\trotZ.setRotateZ( radians(_camDir.z) );\n\n\t\tcamToWorld = translation * (rotZ * rotY * rotX);\n\t\tcamToWorld = camToWorld.invert();\n\t\t\n\t\tfloat3 rayOrigin = float3(0.0f, 0.0f, 0.0f);\n\t\tfloat4 rayOriginWorld = camToWorld * float4(rayOrigin.x, rayOrigin.y, rayOrigin.z, 1.0f);\n\t\tfloat4 PWorld = camToWorld * float4(Px, Py, -1.f, 1.0f);\n\n\t\tfloat4 tmp = PWorld - rayOriginWorld;\n\t\tfloat3 rayDir = normalize( float3(tmp.x, tmp.y, tmp.z) );\n\n\t\treturn rayDir;\n\t\}\n\n\t// http://iquilezles.org/www/articles/fog/fog.htm\n\tfloat3 applyFog(float3 _colour, float _distance)\n\t\{\n\t\tfloat fogAmount = 1.0 - exp( -_distance*fog_b );\n\t    float3  fogColor  = float3(0.5f ,0.6f,0.7f) * 0.05f;\n\t    return mix( _colour, fogColor, fogAmount );\n\t\}\n\n\tbool traceWorld(float3 _p, float3 _dir, int _iterations, float3& _hit, float& _trap)\n\t\{\n\t\t//http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/\n\t\tconst float fudgeFactor = 0.99f;\n\t\t// const float fudgeFactor = 1.0f;\n\n\t\tfloat dist = 0.0f;\n\t\t\n\t\tfor(int i = 0; i < _iterations; ++i)\n\t\t\{\n\t\t\tfloat3 hit = _p + (dist*_dir);\n\t\t\tfloat newtrap = 0.0f;\n\t\t\tfloat t = map(hit, newtrap);\n\n\t\t\tif(t < epsilon)\n\t\t\t\{\n\t\t\t\t// float3 nrm = estimate_normal(hit);\n\t\t\t\t// return shade(hit, nrm);\n\t\t\t\t_hit = hit;\n\t\t\t\treturn true;\n\t\t\t\}\n\n\t\t\tdist += t*fudgeFactor;\n\n\t\t\t_trap = min( _trap, newtrap );\n\t\t\}\n\n\t\t// return float3(0.2f, 0.2f, 0.2f);\n\t\treturn false;\n\t\}\n\n\tvoid process(int2 pos)\n\t\{\n\n\t\tfloat4x4 MVP = float4x4_identity;\n\n\t\tfloat3 colour = float3(0.0f, 0.0f, 0.0f);\n\n\t\tfloat distance = 9999.0f;\n\t\tfloat3 ro = camPos;\n\t\tfloat2 uv = float2(pos.x, pos.y);\n\t\tfor(int j=0; j<aa_samples; j++)\n\t\t\{\n\t\t\tfloat2 random_sample = rand( uv + (float2(j,j) * 0.1f) );\n\n\t\t\tfloat3 rd = cameraRay(uv + random_sample, camPos, camDir, fov);\n\n\t\t\tfloat3 hit = float3(0.0f);\n\t\t\tfloat trap = 1e20f;\n\t\t\tif( traceWorld(ro, rd, iterations, hit, trap) )\n\t\t\t\{\n\t\t\t\t// trap = 1e20f;\n\t\t\t\t// More iterations to add more surface detail\n\t\t\t\t// traceWorld(ro, rd, iterations * 4, hit, trap);\n\t\t\t\tfloat3 nrm = estimate_normal(hit);\n\t\t\t\tdistance = pow(length(ro - hit), fog_exponent_scale);\n\t\t\t\t\n\t\t\t\t// Back step along the normal\n\t\t\t\thit -= (0.045f * nrm);\n\t\t\t\tcolour += shade(hit, nrm, trap);\n\t\t\t\}\n\t\t\}\n\t\tcolour /= aa_samples;\n\n\t\tif(enable_fog)\n\t\t\{\t\t\t\n\t\t\tcolour = applyFog(colour, distance);\n\t\t\}\n\n\t\tdst() = float4(colour.x, colour.y, colour.z, 1.0);\n\t\}\n\};"
 rebuild ""
 "TestKernel_Image Resolution" {4096 2160}
 "TestKernel_Max Iterations" 96
 "TestKernel_Camera Position" {-0.01 1.73 6}
 "TestKernel_Field Of View" 25
 "TestKernel_AntiAliasing Samples" 1
 "TestKernel_Occlusion Falloff" 0.13
 "TestKernel_Occlusion Samples" 12
 "TestKernel_Fog B" 0.007
 "TestKernel_Orbit Trap Colour A" {-0.21 -0.13 0.29}
 "TestKernel_Orbit Trap Colour B" {1 1 1}
 "TestKernel_Orbit Trap Intensity" 0
 "TestKernel_Scene Epsilon" 0.0005
 "TestKernel_Light Positions" {-0.5 2.996 4 0 {"((cos(frame * \[knob \"animspeed\"] )))"} {"((sin(frame * \[knob \"animspeed\"] )))"}}
 "TestKernel_Light Colours" {0.9 0.9 0.98 0 1 0.5}
 "TestKernel_Light Intensities" {30 5}
 format "4096 2160 0 0 4096 2160 1 4K_DCP"
 rebuild_finalise ""
 maxTileLines 25
 name BlinkScript2
 xpos 365
 ypos -116
 addUserKnob {20 User}
 addUserKnob {7 animspeed l "Animation Speed" R 0 10}
 animspeed 0.005
}
Reformat {
 format "2048 1080 0 0 2048 1080 1 2K_DCP"
 name Reformat2
 xpos 365
 ypos -60
 disable true
}
set C6a329a0 [stack 0]
Write {
 file /mnt/netdev/tom.minor/fractal_renders/white/white_%04d.png
 file_type png
 checkHashOnRead false
 in_colorspace linear
 out_colorspace linear
 name Write4
 xpos 365
 ypos 64
 addUserKnob {20 caravr l CaraVR}
 addUserKnob {4 viewPresets l "View Presets" M {main stereo cams all}}
 addUserKnob {22 set l Set -STARTLINE T "w = nuke.thisNode()\nscriptViews = nuke.views()\nviewPreset = w\['viewPresets'].getValue()\nselectedViews = None\nif viewPreset == 0:\n  selectedViews = \['main']\nif viewPreset == 1:\n  stereoViews = \['left', 'right']\n  if set(stereoViews).issubset(set(scriptViews)):\n    selectedViews = stereoViews\n  else:\n    selectedViews = None\nelif viewPreset == 2:\n  selectedViews = \[v for v in scriptViews if 'cam' in v.lower()]\nelif viewPreset == 3:\n  selectedViews = scriptViews\nif selectedViews:\n  w\['views'].fromScript(' '.join(selectedViews))\n"}
}
BlinkScript {
 inputs 0
 kernelSourceFile /mnt/netdev/tom.minor/dev/blinktracer/sdf_renderer.rpp
 recompileCount 630
 ProgramGroup 1
 KernelDescription "2 \"TestKernel\" iterate pixelWise 8f1fd421cc9efd705d13888adfaf812411bc8e69e9210b596847e59cb7962cb0 1 \"dst\" Write Point 27 \"Image Resolution\" Int 2 AAUAANACAAA= \"Max Iterations\" Int 1 ZAAAAA== \"Camera Position\" Float 3 AAAAAAAAgD8AAABAAAAAAA== \"Camera Angles\" Float 3 AADQwQAAAAAAADRDAAAAAA== \"Field Of View\" Float 1 AABIQg== \"AntiAliasing Samples\" Int 1 BAAAAA== \"Enable Occlusion\" Bool 1 AQ== \"Occlusion Max Distance\" Float 1 AADgPw== \"Occlusion Falloff\" Float 1 CtejPQ== \"Occlusion Samples\" Int 1 BgAAAA== \"Shadow Min Distance\" Float 1 zczMPQ== \"Shadow Max Distance\" Float 1 AAAAQA== \"Shadow Falloff\" Float 1 AADgQA== \"Enable Shadows\" Bool 1 AQ== \"Fog B\" Float 1 CtcjOw== \"Fog Exponent\" Int 1 AwAAAA== \"Enable Fog\" Bool 1 AA== \"Mandelbulb Power\" Float 1 AAAAQQ== \"Mandelbulb Iterations\" Int 1 IAAAAA== \"Orbit Trap Colour A\" Float 3 PQpXvrgeBb7hepQ+AAAAAA== \"Orbit Trap Colour B\" Float 3 AACAP9ejkD8AAIA/AAAAAA== \"Orbit Trap Intensity\" Float 1 MzOzPw== \"Scene Epsilon\" Float 1 bxKDOg== \"Normal Epsilon\" Float 1 bxKDOg== \"Light Positions\" Float 6 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= \"Light Colours\" Float 6 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= \"Light Intensities\" Float 2 AAAAAAAAAAA= 27 \"resolution\" 2 1 \"iterations\" 1 1 \"camPos\" 3 1 \"camDir\" 3 1 \"fov\" 1 1 \"aa_samples\" 1 1 \"occlusion_enabled\" 1 1 \"occlusion_maxdist\" 1 1 \"occlusion_falloff\" 1 1 \"occlusion_samples\" 1 1 \"shadowmint\" 1 1 \"shadowwmaxt\" 1 1 \"shadowfalloff\" 1 1 \"shadow_enabled\" 1 1 \"fog_b\" 1 1 \"fog_exponent_scale\" 1 1 \"enable_fog\" 1 1 \"mandelbulb_power\" 1 1 \"mandelbulb_search_iterations\" 1 1 \"trap_colour_a\" 3 1 \"trap_colour_b\" 3 1 \"orbit_trap_intensity\" 1 1 \"epsilon\" 1 1 \"normal_epsilon\" 1 1 \"lightPositions\" 3 2 \"lightColours\" 3 2 \"lightIntensities\" 1 2 0"
 kernelSource "#include \"glsl_functions.h\"\n#include \"sdf_functions.h\"\n#include \"sdf_primitives.h\"\n\n///**** TODO ****\n// * Hemispherical occlusion is wrong\n// * Apply AO only to ambient, don't scale everything by it\n// * Clean up this code, very rough atm\n//\t\t+ The trap value 'bubbles' up through a bunch of functions, crap design\n// * Make the scene the foundry logo?\n\nkernel TestKernel : ImageComputationKernel<ePixelWise>\n\{\n\t// No input data needed\n\tImage<eWrite, eAccessPoint, eEdgeNone> dst;\n\n\tlocal:\n\tstatic const float MAX_DIST = 9999999.9f;\n\tstatic const int MAX_LIGHTS = 2;\n\n\tparam:\n\tint2 resolution;\n\tint iterations;\n\t\n\tfloat3 camPos;\n\tfloat3 camDir;\n\tfloat fov;\n\n\tint aa_samples;\n\n\tbool occlusion_enabled;\n\tfloat occlusion_maxdist;\n\tfloat occlusion_falloff;\n\tint occlusion_samples;\n\n\tfloat shadowmint;\n\tfloat shadowwmaxt;\n\tfloat shadowfalloff;\n\tbool shadow_enabled;\n\n\tfloat fog_b;\n\tint  fog_exponent_scale;\n\tbool enable_fog;\n\n\tfloat mandelbulb_power;\n\tint mandelbulb_search_iterations;\n\t\n\tfloat3 trap_colour_a;\n\tfloat3 trap_colour_b;\n\tfloat orbit_trap_intensity;\n\n\tfloat epsilon;\n\tfloat normal_epsilon;\n\n\tfloat3 lightPositions\[MAX_LIGHTS];\n\tfloat3 lightColours\[MAX_LIGHTS];\n\tfloat  lightIntensities\[MAX_LIGHTS];\n\n\tvoid define()\n\t\{\n\t\t// @todo Ideally this should be linked up to format\n\t\tdefineParam(resolution, \"Image Resolution\", int2(1280, 720) );\n\n\t\t// ----------- Accuracy ---------------\t\t\n\t\tdefineParam(iterations, \"Max Iterations\", 100);\n\t\t\n\n\t\t// ---------- Features -----------\n\t\tdefineParam(occlusion_enabled, \"Enable Occlusion\", true);\n\t\tdefineParam(shadow_enabled, \"Enable Shadows\", true);\n\t\tdefineParam(enable_fog, \"Enable Fog\", false);\n\n\t\t// ----------- Camera ---------------\t\t\n\t\tdefineParam(camPos, \"Camera Position\", \tfloat3(0.0f, 1.0f, 2.0f) );\n\t\tdefineParam(camDir, \"Camera Angles\", float3(-26.0f, 0.0f, 180.0f) );\n\t\tdefineParam(fov, \"Field Of View\", 50.0f);\n\n\t\t// ----------- Sampling ---------------\n\t\tdefineParam(aa_samples, \"AntiAliasing Samples\", 4);\n\t\t\n\t\t// ---------- Occlusion -------------\t\t\n\t\tdefineParam(occlusion_samples, \"Occlusion Samples\", 6);\n\t\tdefineParam(occlusion_maxdist, \"Occlusion Max Distance\", 1.75f);\n\t\tdefineParam(occlusion_falloff, \"Occlusion Falloff\", 0.08f);\n\n\t\t// ---------- Shadows -------------\n\t\tdefineParam(shadowmint, \"Shadow Min Distance\", \t0.1f);\n\t\tdefineParam(shadowwmaxt, \"Shadow Max Distance\", 2.0f);\n\t\tdefineParam(shadowfalloff, \"Shadow Falloff\", \t7.0f);\n\n\t\t// ----------- Fog ---------------\n\t\tdefineParam(fog_b, \"Fog B\", 0.0025f);\n\t\tdefineParam(fog_exponent_scale, \"Fog Exponent\", 3);\n\n\n\t\t// ---------- Mandelbulb --------------\n\t\tdefineParam(mandelbulb_power, \"Mandelbulb Power\", 8.0f);\t//3.0 + fabs((sin(frame * \[knob \"animspeed\"])) * 5.0)\n\t\tdefineParam(mandelbulb_search_iterations, \"Mandelbulb Iterations\", 32);\n\t\tdefineParam(trap_colour_a, \"Orbit Trap Colour A\", float3(-0.21f, \t-0.13f, \t0.29f) );\n\t\tdefineParam(trap_colour_b, \"Orbit Trap Colour B\", float3(1.0f,\t\t1.13f,\t\t1.0f) );\n\t\tdefineParam(orbit_trap_intensity, \"Orbit Trap Intensity\", 1.4f);\n\n\t\t// ----------- Accuracy ---------------\n\t\tdefineParam(epsilon, \"Scene Epsilon\", 0.001f);\n\t\tdefineParam(normal_epsilon, \"Normal Epsilon\", 0.001f);\n\n\t\tdefineParam(lightPositions, \"Light Positions\");\n\t\tdefineParam(lightColours, \"Light Colours\");\n\t\tdefineParam(lightIntensities, \"Light Intensities\");\n\t\}\n\t\n\tvoid init()\n\t\{\n\t\t// resolution = float2( dst.bounds.y1, dst.bounds.y2 );\n\n\t\t// lightPositions\[0] = float3( -0.5f, 3.0f, 4.0f );\n\t\t// lightColours\[0]\t  = float3( 0.9f, 0.9f, 0.98f );\n\t\t// lightIntensities\[0]\t= 30.0f;\n\n\t\t// lightPositions\[1] = float3( 0.0, -0.4, 0.92 );\n\t\t// lightColours\[1]\t  = float3( 0.0f, 1.0f, 0.5f );\n\t\t// lightIntensities\[0]\t= 5.0f;\n\t\}\n\n\t// http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n\tfloat rand(float2 _co)\n\t\{\n \t   return fract(sin(dot(_co , float2(12.9898f, 78.233f))) * 43758.5453f);\n\t\}\n\n\tfloat sdMandelbulb(float3 _p, float _power, float _iterations, float& _trap)\n\t// float sdMandelbulb(float3 _p, float _power, float _iterations)\n\t\{\n\t\tconst float sq_threshold = 2.0f; // Divergence threshold\n\t\tconst float s = 0.9f;\n\n\t\tfloat3 zn = _p;\n\t\tfloat rad = 0.0f;\n\t\tfloat dist = 0.0f;\n\t\tfloat d = 1.0f;\n        float k = 1.0f;\n\n        _trap = 1e10;\n\t\tfor(int i = 0; i < _iterations; i++)\n\t\t\{\n\t\t\trad = length(zn);\n\n\t\t\t_trap = min(_trap, dot(zn,zn) / (k*k) );\n\n\t\t\tif(rad > sq_threshold)\n\t\t\t\{\n\t\t\t\tdist = 0.5f * rad * log(rad)/float(d);\n\t\t\t\}\n\t\t\telse\n\t\t\t\{\n\t\t\t\tfloat th = atan2( length( float3(zn.x, zn.y, 0.0f) ), zn.z);\n\t\t\t\tfloat phi = atan2( zn.y, zn.x );\n\t\t\t\tfloat rado = pow(rad, _power);\n\t\t\t\td = pow(rad, _power - 1.0f) * (_power - 1.0f) * d + 1.0f;\n\n\t\t\t\tfloat sint = sin(th * _power);\n\t\t\t\tzn.x = rado * sint * cos(phi * _power);\n\t\t\t\tzn.y = rado * sint * sin(phi * _power);\n\t\t\t\tzn.z = rado * cos(th * _power);\n\t\t\t\tzn += _p;\n\t\t\t\}\n\n\t\t\tk *= s;\n\t\t\}\n\n\t\treturn dist;\n\t\}\n\n\tfloat map(float3 _p, float& _trap)\n\t\{\n\t\tfloat3 p = _p;\n\t\tfloat d1 = sdPlane(p, float4(0.0f, 1.0f, 0.0f, 0.0f) );\n\t\t\n\t\tp = p - float3(0.0f, 1.1f, 0.0f);\n\t\tfloat d2 = sdMandelbulb(p, mandelbulb_power, mandelbulb_search_iterations, _trap);\n\t\t\n\t\treturn min(d2, d1);\n\t\}\n\n\t// http://www.aduprat.com/portfolio/?page=articles/hemisphericalSDFAO\n\tfloat3 randomSphereDir(float2 _rnd)\n\t\{\n\t\tfloat s = _rnd.x * PI * 2.0f;\n\t\tfloat t = _rnd.y * 2.0 - 1.0f;\n\t\treturn float3( sin(s), cos(s), t) / sqrt(1.0f + t * t);\n\t\}\n\n\tfloat3 randomHemisphereDir(float3 _dir, float _i)\n\t\{\n\t\tfloat3 v = randomSphereDir( float2(rand(_i+1.0f), rand(_i + 2.0f)) );\n\t\treturn v * sign(dot(v, _dir));\n\t\}\n\n\tfloat hemisphericalOcclusion(float3 _p, float3 _n, float _maxDist, float _falloff)\n\t\{\n\t\tfloat ao = 0.0f;\n\t\tconst float inverseOcclusionSamples = 1.0f / float(occlusion_samples);\n\t\tconst float rad = 1.0f * -1.0f * inverseOcclusionSamples;\n\n\t\tfor(int i = 0; i < occlusion_samples; i++)\n\t\t\{\n\t\t\tfloat l = rand(float(i)) * _maxDist; // Randomly sized sample\n\t\t\tfloat3 rayDir = normalize(_n + randomHemisphereDir(_n,l) * rad) * l;\n\n\t\t\tfloat tmptrap = 0.0f;\n\t\t\tao += (l - map(_p + rayDir, tmptrap)) / pow(1.0f + l, _falloff);\n\t\t\}\n\n\t\treturn clamp( 1.0f - ao / float(occlusion_samples), 0.0f, 1.0f);\n\t\}\n\n\t// http://www.iquilezles.org/www/articles/rmshadows/rmshadows.htm\n\tfloat softshadow(float3 _ro, float3 _rd, float _mint, float _maxt, float _k)\n\t\{\n\t\tfloat result = 1.0f;\n\t\tfor(float t = _mint; t < _maxt; )\n\t\t\{\n\t\t\tfloat tmptrap = 0.0f;\n\t\t\tfloat h = map(_ro + _rd*t, tmptrap);\n\t\t\tif(h < 0.001\n)\t\t\t\{\n\t\t\t\treturn 0.0f;\n\t\t\t\}\n\n\t\t\tresult = min(result, _k*h/t);\n\t\t\tt += h;\n\t\t\}\n\n\t\treturn result;\n\t\}\n\n\tfloat3 shade(float3 _p, float3 _n, float _trap)\n\t\{\n\t\tfloat3 radiance = float3(0.0f);\n\n\t\tfor(int i = 0; i < MAX_LIGHTS; i++)\n\t\t\{\n\t\t\tfloat3 light_path = _p - lightPositions\[i];\n\t\t\tfloat3 light_dir = normalize(light_path);\n\t\t\tfloat attenuation = 1.0f / pow(length(light_path), 2);\n\t\t\tfloat halflambert = (max(dot(normalize(_n), light_dir), 0.0f) + 0.5f) * 0.5f; // Soften up the diffuse lighting a little (https://developer.valvesoftware.com/wiki/Half_Lambert)\n\n\t\t\tfloat shadowed = shadow_enabled ? softshadow(_p, -light_dir, shadowmint, shadowwmaxt, shadowfalloff) : 1.0f;\n\t\t\tshadowed = clamp(shadowed, 0.025f, 1.0f); // Prevent a very dark shadow, you could just add an ambient term to the lighting calculations instead\n\n\t\t\tfloat3 diffuse_colour = mix( float3(1.0f), mix( trap_colour_a, trap_colour_b, _trap), orbit_trap_intensity);\n\t\t\tradiance +=  diffuse_colour * (halflambert * lightColours\[i] * lightIntensities\[i] * attenuation) * shadowed;\n\t\t\}\n\n\t\tfloat3 ambient(0.025f, 0.025f, 0.05f);\n\t\t// return radiance + (ambient * (occlusion_enabled ? hemisphericalOcclusion(_p, _n, occlusion_maxdist, occlusion_falloff) : 1.0f) );\n\t\treturn (ambient * (occlusion_enabled ? hemisphericalOcclusion(_p, _n, occlusion_maxdist, occlusion_falloff) : 1.0f) );\n\t\}\n\n\t// Finite difference estimation\n\tfloat3 estimate_normal(float3 _p)\n\t\{\n\t\tfloat3 dx = float3(normal_epsilon, 0.0f, 0.0f);\n\t\tfloat3 dy = float3(0.0f, normal_epsilon, 0.0f);\n\t\tfloat3 dz = float3(0.0f, 0.0f, normal_epsilon);\n\n\t\tfloat tmptrap = 0.0f;\n\t\treturn normalize(float3(\n\t\t\t\tmap(_p + dx, tmptrap) - map(_p - dx, tmptrap),\n\t\t\t\tmap(_p + dy, tmptrap) - map(_p - dy, tmptrap),\n\t\t\t\tmap(_p + dz, tmptrap) - map(_p - dz, tmptrap)\n\t\t\t));\n\t\}\n\n\tfloat3 cameraRay(float2 _fragcoord, float3 _camPos, float3 _camDir, float _fov)\n\t\{\n\t\tint x = _fragcoord.x;\n\t\tint y = _fragcoord.y;\n\n\t\tfloat imageAspectRatio = resolution.x / (float)resolution.y; \n\t\tfloat Px = (2.0f * ((x + 0.5f) / resolution.x) - 1.0f) * tan(_fov / 2.0f * PI / 180.0f) * imageAspectRatio;\n\t\tfloat Py = (1.0f - 2.0f * ((y + 0.5f) / resolution.y) * tan(_fov / 2.0f * PI / 180.0f)); \n\n\t\tfloat4x4 camToWorld = float4x4_identity;\n\t\t\n\t\t// Todo, do this in init() instead\n\t\tfloat4x4 rotX, rotY, rotZ, translation;\n\t\ttranslation.setTranslate( float4(_camPos.x, _camPos.y, _camPos.z, 1.0f) );\n\t\trotX.setRotateX( radians(_camDir.x) );\t // Should these be in radians or degrees?\n\t\trotY.setRotateY( radians(_camDir.y) );\n\t\trotZ.setRotateZ( radians(_camDir.z) );\n\n\t\tcamToWorld = translation * (rotZ * rotY * rotX);\n\t\tcamToWorld = camToWorld.invert();\n\t\t\n\t\tfloat3 rayOrigin = float3(0.0f, 0.0f, 0.0f);\n\t\tfloat4 rayOriginWorld = camToWorld * float4(rayOrigin.x, rayOrigin.y, rayOrigin.z, 1.0f);\n\t\tfloat4 PWorld = camToWorld * float4(Px, Py, -1.f, 1.0f);\n\n\t\tfloat4 tmp = PWorld - rayOriginWorld;\n\t\tfloat3 rayDir = normalize( float3(tmp.x, tmp.y, tmp.z) );\n\n\t\treturn rayDir;\n\t\}\n\n\t// http://iquilezles.org/www/articles/fog/fog.htm\n\tfloat3 applyFog(float3 _colour, float _distance)\n\t\{\n\t\tfloat fogAmount = 1.0 - exp( -_distance*fog_b );\n\t    float3  fogColor  = float3(0.5f ,0.6f,0.7f) * 0.05f;\n\t    return mix( _colour, fogColor, fogAmount );\n\t\}\n\n\tbool traceWorld(float3 _p, float3 _dir, int _iterations, float3& _hit, float& _trap)\n\t\{\n\t\t//http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/\n\t\tconst float fudgeFactor = 0.99f;\n\t\t// const float fudgeFactor = 1.0f;\n\n\t\tfloat dist = 0.0f;\n\t\t\n\t\tfor(int i = 0; i < _iterations; ++i)\n\t\t\{\n\t\t\tfloat3 hit = _p + (dist*_dir);\n\t\t\tfloat newtrap = 0.0f;\n\t\t\tfloat t = map(hit, newtrap);\n\n\t\t\tif(t < epsilon)\n\t\t\t\{\n\t\t\t\t// float3 nrm = estimate_normal(hit);\n\t\t\t\t// return shade(hit, nrm);\n\t\t\t\t_hit = hit;\n\t\t\t\treturn true;\n\t\t\t\}\n\n\t\t\tdist += t*fudgeFactor;\n\n\t\t\t_trap = min( _trap, newtrap );\n\t\t\}\n\n\t\t// return float3(0.2f, 0.2f, 0.2f);\n\t\treturn false;\n\t\}\n\n\tvoid process(int2 pos)\n\t\{\n\n\t\tfloat4x4 MVP = float4x4_identity;\n\n\t\tfloat3 colour = float3(0.0f, 0.0f, 0.0f);\n\n\t\tfloat distance = 9999.0f;\n\t\tfloat3 ro = camPos;\n\t\tfloat2 uv = float2(pos.x, pos.y);\n\t\tfor(int j=0; j<aa_samples; j++)\n\t\t\{\n\t\t\tfloat2 random_sample = rand( uv + (float2(j,j) * 0.1f) );\n\n\t\t\tfloat3 rd = cameraRay(uv + random_sample, camPos, camDir, fov);\n\n\t\t\tfloat3 hit = float3(0.0f);\n\t\t\tfloat trap = 1e20f;\n\t\t\tif( traceWorld(ro, rd, iterations, hit, trap) )\n\t\t\t\{\n\t\t\t\t// trap = 1e20f;\n\t\t\t\t// More iterations to add more surface detail\n\t\t\t\t// traceWorld(ro, rd, iterations * 4, hit, trap);\n\t\t\t\tfloat3 nrm = estimate_normal(hit);\n\t\t\t\tdistance = pow(length(ro - hit), fog_exponent_scale);\n\t\t\t\t\n\t\t\t\t// Back step along the normal\n\t\t\t\thit -= (0.045f * nrm);\n\t\t\t\tcolour += shade(hit, nrm, trap);\n\t\t\t\}\n\t\t\}\n\t\tcolour /= aa_samples;\n\n\t\tif(enable_fog)\n\t\t\{\t\t\t\n\t\t\tcolour = applyFog(colour, distance);\n\t\t\}\n\n\t\tdst() = float4(colour.x, colour.y, colour.z, 1.0);\n\t\}\n\};"
 rebuild ""
 "TestKernel_Camera Position" {0 1.6 6}
 "TestKernel_Field Of View" 35
 "TestKernel_Occlusion Falloff" 0.62
 "TestKernel_Occlusion Samples" 12
 "TestKernel_Mandelbulb Power" {{"3.0 + fabs((sin(frame * \[knob \"animspeed\"])) * 5.0)"}}
 "TestKernel_Orbit Trap Colour A" {-0.21 -0.13 0.29}
 "TestKernel_Orbit Trap Colour B" {1 1.13 1}
 "TestKernel_Orbit Trap Intensity" 1.405
 "TestKernel_Light Positions" {-0.5 2.996 4 0 {"((cos(frame * \[knob \"animspeed\"] )))"} {"((sin(frame  * \[knob \"animspeed\"])))"}}
 "TestKernel_Light Colours" {0.9 0.9 0.98 0 1 0.5}
 "TestKernel_Light Intensities" {30 4.93}
 format "1280 720 0 0 1280 720 1 HD_720"
 rebuild_finalise ""
 maxTileLines 40
 name BlinkScript1
 selected true
 xpos 181
 ypos -114
 addUserKnob {20 User}
 addUserKnob {7 animspeed l "Animation Speed" R 0 10}
 animspeed 0.005
}
set N6a20f30 [stack 0]
clone $C6a329a0 {
 xpos 181
 ypos -62
 selected false
}
Write {
 file /mnt/netdev/tom.minor/fractal_renders/orbit/orbit_%04d.png
 file_type png
 checkHashOnRead false
 in_colorspace linear
 out_colorspace linear
 name Write3
 xpos 181
 ypos 62
 addUserKnob {20 caravr l CaraVR}
 addUserKnob {4 viewPresets l "View Presets" M {main stereo cams all}}
 addUserKnob {22 set l Set -STARTLINE T "w = nuke.thisNode()\nscriptViews = nuke.views()\nviewPreset = w\['viewPresets'].getValue()\nselectedViews = None\nif viewPreset == 0:\n  selectedViews = \['main']\nif viewPreset == 1:\n  stereoViews = \['left', 'right']\n  if set(stereoViews).issubset(set(scriptViews)):\n    selectedViews = stereoViews\n  else:\n    selectedViews = None\nelif viewPreset == 2:\n  selectedViews = \[v for v in scriptViews if 'cam' in v.lower()]\nelif viewPreset == 3:\n  selectedViews = scriptViews\nif selectedViews:\n  w\['views'].fromScript(' '.join(selectedViews))\n"}
}
push $N6a20f30
Viewer {
 frame 249
 frame_range 1-628
 fps 25
 name Viewer1
 xpos -1
 ypos 54
}
