#include "glsl_functions.h"
#include "sdf_functions.h"
#include "sdf_primitives.h"

///**** TODO ****
// * Hemispherical occlusion is wrong
// * Apply AO only to ambient, don't scale everything by it
// * Clean up this code, very rough atm
//		+ The trap value 'bubbles' up through a bunch of functions, crap design
// * Make the scene the foundry logo?

kernel TestKernel : ImageComputationKernel<ePixelWise>
{
	// No input data needed
	Image<eWrite, eAccessPoint, eEdgeNone> dst;

	local:
	static const float MAX_DIST = 9999999.9f;
	static const int MAX_LIGHTS = 2;
	int2 resolution;

	param:
	int iterations;
	
	float3 camPos;
	float3 camDir;
	float fov;

	int aa_samples;

	bool occlusion_enabled;
	float occlusion_maxdist;
	float occlusion_falloff;
	int occlusion_samples;

	float shadowmint;
	float shadowwmaxt;
	float shadowfalloff;
	bool shadow_enabled;

	float fog_b;
	int  fog_exponent_scale;
	bool enable_fog;

	float mandelbulb_power;
	int mandelbulb_search_iterations;
	
	float3 trap_colour_a;
	float3 trap_colour_b;
	float orbit_trap_intensity;

	float epsilon;
	float normal_epsilon;

	float3 lightPositions[MAX_LIGHTS];
	float3 lightColours[MAX_LIGHTS];
	float  lightIntensities[MAX_LIGHTS];

	void define()
	{
		// @todo Ideally this should be linked up to format
		// defineParam(resolution, "Image Resolution", int2(1280, 720) );

		// ----------- Accuracy ---------------		
		defineParam(iterations, "Max Iterations", 100);
		

		// ---------- Features -----------
		defineParam(occlusion_enabled, "Enable Occlusion", true);
		defineParam(shadow_enabled, "Enable Shadows", true);
		defineParam(enable_fog, "Enable Fog", false);

		// ----------- Camera ---------------		
		defineParam(camPos, "Camera Position", 	float3(0.0f, 1.0f, 2.0f) );
		defineParam(camDir, "Camera Angles", float3(-26.0f, 0.0f, 180.0f) );
		defineParam(fov, "Field Of View", 50.0f);

		// ----------- Sampling ---------------
		defineParam(aa_samples, "AntiAliasing Samples", 4);
		
		// ---------- Occlusion -------------		
		defineParam(occlusion_samples, "Occlusion Samples", 6);
		defineParam(occlusion_maxdist, "Occlusion Max Distance", 1.75f);
		defineParam(occlusion_falloff, "Occlusion Falloff", 0.08f);

		// ---------- Shadows -------------
		defineParam(shadowmint, "Shadow Min Distance", 	0.1f);
		defineParam(shadowwmaxt, "Shadow Max Distance", 2.0f);
		defineParam(shadowfalloff, "Shadow Falloff", 	7.0f);

		// ----------- Fog ---------------
		defineParam(fog_b, "Fog B", 0.0025f);
		defineParam(fog_exponent_scale, "Fog Exponent", 3);


		// ---------- Mandelbulb --------------
		defineParam(mandelbulb_power, "Mandelbulb Power", 8.0f);	//3.0 + fabs((sin(frame * [knob "animspeed"])) * 5.0)
		defineParam(mandelbulb_search_iterations, "Mandelbulb Iterations", 32);
		defineParam(trap_colour_a, "Orbit Trap Colour A", float3(-0.21f, 	-0.13f, 	0.29f) );
		defineParam(trap_colour_b, "Orbit Trap Colour B", float3(1.0f,		1.13f,		1.0f) );
		defineParam(orbit_trap_intensity, "Orbit Trap Intensity", 1.4f);

		// ----------- Accuracy ---------------
		defineParam(epsilon, "Scene Epsilon", 0.001f);
		defineParam(normal_epsilon, "Normal Epsilon", 0.001f);

		defineParam(lightPositions, "Light Positions");
		defineParam(lightColours, "Light Colours");
		defineParam(lightIntensities, "Light Intensities");
	}
	
	void init()
	{
		resolution = float2( dst.bounds.x2 - dst.bounds.x1, dst.bounds.y2 - dst.bounds.y1 );

		// lightPositions[0] = float3( -0.5f, 3.0f, 4.0f );
		// lightColours[0]	  = float3( 0.9f, 0.9f, 0.98f );
		// lightIntensities[0]	= 30.0f;

		// lightPositions[1] = float3( 0.0, -0.4, 0.92 );
		// lightColours[1]	  = float3( 0.0f, 1.0f, 0.5f );
		// lightIntensities[0]	= 5.0f;
	}

	// http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
	float rand(float2 _co)
	{
 	   return fract(sin(dot(_co , float2(12.9898f, 78.233f))) * 43758.5453f);
	}

	float sdMandelbulb(float3 _p, float _power, float _iterations, float& _trap)
	// float sdMandelbulb(float3 _p, float _power, float _iterations)
	{
		const float sq_threshold = 2.0f; // Divergence threshold
		const float s = 0.9f;

		float3 zn = _p;
		float rad = 0.0f;
		float dist = 0.0f;
		float d = 1.0f;
        float k = 1.0f;

        _trap = 1e10;
		for(int i = 0; i < _iterations; i++)
		{
			rad = length(zn);

			_trap = min(_trap, dot(zn,zn) / (k*k) );

			if(rad > sq_threshold)
			{
				dist = 0.5f * rad * log(rad)/float(d);
			}
			else
			{
				float th = atan2( length( float3(zn.x, zn.y, 0.0f) ), zn.z);
				float phi = atan2( zn.y, zn.x );
				float rado = pow(rad, _power);
				d = pow(rad, _power - 1.0f) * (_power - 1.0f) * d + 1.0f;

				float sint = sin(th * _power);
				zn.x = rado * sint * cos(phi * _power);
				zn.y = rado * sint * sin(phi * _power);
				zn.z = rado * cos(th * _power);
				zn += _p;
			}

			k *= s;
		}

		return dist;
	}

	float map(float3 _p, float& _trap)
	{
		float3 p = _p;
		float d1 = sdPlane(p, float4(0.0f, 1.0f, 0.0f, 0.0f) );
		
		p = p - float3(0.0f, 1.1f, 0.0f);
		float d2 = sdMandelbulb(p, mandelbulb_power, mandelbulb_search_iterations, _trap);
		
		return min(d2, d1);
	}

	// http://www.aduprat.com/portfolio/?page=articles/hemisphericalSDFAO
	float3 randomSphereDir(float2 _rnd)
	{
		float s = _rnd.x * PI * 2.0f;
		float t = _rnd.y * 2.0 - 1.0f;
		return float3( sin(s), cos(s), t) / sqrt(1.0f + t * t);
	}

	float3 randomHemisphereDir(float3 _dir, float _i)
	{
		float3 v = randomSphereDir( float2(rand(_i+1.0f), rand(_i + 2.0f)) );
		return v * sign(dot(v, _dir));
	}

	float hemisphericalOcclusion(float3 _p, float3 _n, float _maxDist, float _falloff)
	{
		float ao = 0.0f;
		const float inverseOcclusionSamples = 1.0f / float(occlusion_samples);
		const float rad = 1.0f * -1.0f * inverseOcclusionSamples;

		for(int i = 0; i < occlusion_samples; i++)
		{
			float l = rand(float(i)) * _maxDist; // Randomly sized sample
			float3 rayDir = normalize(_n + randomHemisphereDir(_n,l) * rad) * l;

			float tmptrap = 0.0f;
			ao += (l - map(_p + rayDir, tmptrap)) / pow(1.0f + l, _falloff);
		}

		return clamp( 1.0f - ao / float(occlusion_samples), 0.0f, 1.0f);
	}

	// http://www.iquilezles.org/www/articles/rmshadows/rmshadows.htm
	float softshadow(float3 _ro, float3 _rd, float _mint, float _maxt, float _k)
	{
		float result = 1.0f;
		for(float t = _mint; t < _maxt; )
		{
			float tmptrap = 0.0f;
			float h = map(_ro + _rd*t, tmptrap);
			if(h < 0.001
)			{
				return 0.0f;
			}

			result = min(result, _k*h/t);
			t += h;
		}

		return result;
	}

	float3 shade(float3 _p, float3 _n, float _trap)
	{
		float3 radiance = float3(0.0f);

		for(int i = 0; i < MAX_LIGHTS; i++)
		{
			float3 light_path = _p - lightPositions[i];
			float3 light_dir = normalize(light_path);
			float attenuation = 1.0f / pow(length(light_path), 2);
			float halflambert = (max(dot(normalize(_n), light_dir), 0.0f) + 0.5f) * 0.5f; // Soften up the diffuse lighting a little (https://developer.valvesoftware.com/wiki/Half_Lambert)

			float shadowed = shadow_enabled ? softshadow(_p, -light_dir, shadowmint, shadowwmaxt, shadowfalloff) : 1.0f;
			shadowed = clamp(shadowed, 0.025f, 1.0f); // Prevent a very dark shadow, you could just add an ambient term to the lighting calculations instead

			float3 diffuse_colour = mix( float3(1.0f), mix( trap_colour_a, trap_colour_b, _trap), orbit_trap_intensity);
			radiance +=  diffuse_colour * (halflambert * lightColours[i] * lightIntensities[i] * attenuation) * shadowed;
		}

		float3 ambient(0.025f, 0.025f, 0.05f);
		return radiance + (ambient * (occlusion_enabled ? hemisphericalOcclusion(_p, _n, occlusion_maxdist, occlusion_falloff) : 1.0f) );
		// return (ambient * (occlusion_enabled ? hemisphericalOcclusion(_p, _n, occlusion_maxdist, occlusion_falloff) : 1.0f) );
	}

	// Finite difference estimation
	float3 estimate_normal(float3 _p)
	{
		float3 dx = float3(normal_epsilon, 0.0f, 0.0f);
		float3 dy = float3(0.0f, normal_epsilon, 0.0f);
		float3 dz = float3(0.0f, 0.0f, normal_epsilon);

		float tmptrap = 0.0f;
		return normalize(float3(
				map(_p + dx, tmptrap) - map(_p - dx, tmptrap),
				map(_p + dy, tmptrap) - map(_p - dy, tmptrap),
				map(_p + dz, tmptrap) - map(_p - dz, tmptrap)
			));
	}

	float3 cameraRay(float2 _fragcoord, float3 _camPos, float3 _camDir, float _fov)
	{
		int x = _fragcoord.x;
		int y = _fragcoord.y;

		float imageAspectRatio = resolution.x / (float)resolution.y; 
		float Px = (2.0f * ((x + 0.5f) / resolution.x) - 1.0f) * tan(_fov / 2.0f * PI / 180.0f) * imageAspectRatio;
		float Py = (1.0f - 2.0f * ((y + 0.5f) / resolution.y) * tan(_fov / 2.0f * PI / 180.0f)); 

		float4x4 camToWorld = float4x4_identity;
		
		// Todo, do this in init() instead
		float4x4 rotX, rotY, rotZ, translation;
		translation.setTranslate( float4(_camPos.x, _camPos.y, _camPos.z, 1.0f) );
		rotX.setRotateX( radians(_camDir.x) );	 // Should these be in radians or degrees?
		rotY.setRotateY( radians(_camDir.y) );
		rotZ.setRotateZ( radians(_camDir.z) );

		camToWorld = translation * (rotZ * rotY * rotX);
		camToWorld = camToWorld.invert();
		
		float3 rayOrigin = float3(0.0f, 0.0f, 0.0f);
		float4 rayOriginWorld = camToWorld * float4(rayOrigin.x, rayOrigin.y, rayOrigin.z, 1.0f);
		float4 PWorld = camToWorld * float4(Px, Py, -1.f, 1.0f);

		float4 tmp = PWorld - rayOriginWorld;
		float3 rayDir = normalize( float3(tmp.x, tmp.y, tmp.z) );

		return rayDir;
	}

	// http://iquilezles.org/www/articles/fog/fog.htm
	float3 applyFog(float3 _colour, float _distance)
	{
		float fogAmount = 1.0 - exp( -_distance*fog_b );
	    float3  fogColor  = float3(0.5f ,0.6f,0.7f) * 0.05f;
	    return mix( _colour, fogColor, fogAmount );
	}

	bool traceWorld(float3 _p, float3 _dir, int _iterations, float3& _hit, float& _trap)
	{
		//http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/
		const float fudgeFactor = 0.99f;
		// const float fudgeFactor = 1.0f;

		float dist = 0.0f;
		
		for(int i = 0; i < _iterations; ++i)
		{
			float3 hit = _p + (dist*_dir);
			float newtrap = 0.0f;
			float t = map(hit, newtrap);

			if(t < epsilon)
			{
				// float3 nrm = estimate_normal(hit);
				// return shade(hit, nrm);
				_hit = hit;
				return true;
			}

			dist += t*fudgeFactor;

			_trap = min( _trap, newtrap );
		}

		// return float3(0.2f, 0.2f, 0.2f);
		return false;
	}

	void process(int2 pos)
	{

		float4x4 MVP = float4x4_identity;

		float3 colour = float3(0.0f, 0.0f, 0.0f);

		float distance = 9999.0f;
		float3 ro = camPos;
		float2 uv = float2(pos.x, pos.y);
		for(int j=0; j<aa_samples; j++)
		{
			float2 random_sample = rand( uv + (float2(j,j) * 0.1f) );

			float3 rd = cameraRay(uv + random_sample, camPos, camDir, fov);

			float3 hit = float3(0.0f);
			float trap = 1e20f;
			if( traceWorld(ro, rd, iterations, hit, trap) )
			{
				// trap = 1e20f;
				// More iterations to add more surface detail
				// traceWorld(ro, rd, iterations * 4, hit, trap);
				float3 nrm = estimate_normal(hit);
				distance = pow(length(ro - hit), fog_exponent_scale);
				
				// Back step along the normal
				hit -= (0.045f * nrm);
				colour += shade(hit, nrm, trap);
			}
		}
		colour /= aa_samples;

		if(enable_fog)
		{			
			colour = applyFog(colour, distance);
		}

		dst() = float4(colour.x, colour.y, colour.z, 1.0);
	}
};