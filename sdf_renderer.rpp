#include "sdf_functions.h"
#include "sdf_primitives.h"

///**** TODO ****
// * Make the scene the foundry logo?
// * Antialias
// * Shadows

kernel TestKernel : ImageComputationKernel<ePixelWise>
{
	// No input data needed
	Image<eWrite, eAccessPoint, eEdgeNone> dst;

	param:
	int2 resolution;
	int iterations;
	
	float3 camPos;
	float3 camDir;
	float3 camUp;
	float fov;

	void define()
	{
		defineParam(resolution, "Image Resolution", int2(1280, 720) );
		defineParam(iterations, "Max Iterations", 100);

		defineParam(camPos, "Camera Position", float3(0.0f, 0.0f, 10.0f) );
		defineParam(camDir, "Camera Direction", float3(0.0f, 0.0f, -1.0f) );
		defineParam(camUp, "Camera Up", float3(0.0f, 1.0f, 0.0f) );

		defineParam(fov, "Field Of View", 50.0f);
	}

	local:
	const float MAX_DIST = 999999.9f;
	const float EPSILON = 0.01f;

	void init()
	{
	}

	float intersectScene(float3 _p)
	{
		float d1 = sdSphere(_p, 0.4f);

		return d1;
	}

	float3 shade(float3 _p, float3 _n)
	{
		return float3(1.0f, 1.0f, 1.0f);
	}

	float3 estimate_normal(float3 _p)
	{

	}

	float3 cameraRay(int2 _fragcoord, float3 _camPos, float3 _camDir, float3 _camUp, float _fov)
	{
		_camDir = normalize(_camDir);
		float3 right = _camDir;//float3(1.0f, 0.0f, 0.0f);
		float3 forward = cross(_camUp, right );

		float aspect = float(resolution.x) / float(resolution.y);
		float u = aspect * (_fragcoord.x * 2.0f / resolution.x - 1.0f);
		float v = (_fragcoord.y * 2.0f / resolution.y - 1.0f);
		float fov_ratio = (0.5f*aspect) / (tan(radians(fov * 0.5f)));

		float3 rayOrigin = _camPos;
		float3 rayDir = normalize( forward*fov_ratio + right*u + _camUp*v );

		return rayDir;
	}

	float3 traceWorld(float3 _p, float3 _dir)
	{
		float dist = 0.0f;
		
		for(int i = 0; i < iterations; ++i)
		{
			float3 hit = _p + (dist*_dir);
			float t = intersectScene( hit );

			if(t < 0.01f)
			{
				float3 nrm = float3(0.0f, 0.0f, 0.0);
				return shade(hit, nrm);
			}

			dist += t;
		}

		return float3(0.0f, 0.0f, 0.0f);
	}

	void process(int2 pos)
	{
		float3 ro = camPos;
		float3 rd = cameraRay(pos, camPos, camDir, camUp, fov);

		float3 colour = traceWorld(ro, rd);

		dst() = float4(colour.x, colour.y, colour.z, 1.0);
	}
};